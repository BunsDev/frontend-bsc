/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ChampagneRollInterface extends utils.Interface {
  functions: {
    "setMigrateFactory(address)": FunctionFragment;
    "migrate_user(address)": FunctionFragment;
    "migrate(address,uint256)": FunctionFragment;
    "removeLiquidity(address,address,address,uint256)": FunctionFragment;
    "addLiquidity(address,address,uint256,uint256)": FunctionFragment;
  };

  
  encodeFunctionData(
    functionFragment: "setMigrateFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate_user",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values?: [string,BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values?: [string,string,string,BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string,string,BigNumberish,BigNumberish]
  ): string;
  

  decodeFunctionResult(functionFragment: "setMigrateFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrate_user",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  

  events: {
    "Migrated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Migrated"): EventFragment;
}

export type MigratedEvent = TypedEvent<
  [string, string, BigNumber],
  { old_pairaddr: string; cham_pairaddr: string; champ_lp: BigNumber }
  >;
  export type MigratedEventFilter = TypedEventFilter<MigratedEvent>;

export interface ChampagneRoll extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChampagneRollInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setMigrateFactory(
      _champagnefactory: string,
    ): Promise<void>;

    migrate_user(
      orig_pairaddr: string,
    ): Promise<ContractTransaction>;

    migrate(
      orig_pairaddr: string,
      liquidity: BigNumberish,
    ): Promise<ContractTransaction>;

    removeLiquidity(
      orig_pairaddr: string,
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish
    ): Promise<ContractTransaction>;

    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
    ): Promise<ContractTransaction>;
  };

  setMigrateFactory(
    _champagnefactory: string,
  ): Promise<void>;

  migrate_user(
    orig_pairaddr: string,
  ): Promise<ContractTransaction>;

  migrate(
    orig_pairaddr: string,
    liquidity: BigNumberish,
  ): Promise<ContractTransaction>;

  removeLiquidity(
    orig_pairaddr: string,
    tokenA: string,
    tokenB: string,
    liquidity: BigNumberish
  ): Promise<ContractTransaction>;

  addLiquidity(
    tokenA: string,
    tokenB: string,
    amountADesired: BigNumberish,
    amountBDesired: BigNumberish,
  ): Promise<ContractTransaction>;

  callStatic: {
    setMigrateFactory(
      _champagnefactory: string,
    ): Promise<void>;
  
    migrate_user(
      orig_pairaddr: string,
    ): Promise<void>;
  
    migrate(
      orig_pairaddr: string,
      liquidity: BigNumberish,
    ): Promise<void>;
  
    removeLiquidity(
      orig_pairaddr: string,
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish
    ): Promise<void>;
  
    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
    ): Promise<void>;
  };

  events: {
    "Migrated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Migrated"): EventFragment;

  filters: {
    "Migrated(address,address,uint256)"(
      old_pairaddr?: string | null,
      cham_pairaddr?: string | null,
      champ_lp?: BigNumberish | null
    ): MigratedEventFilter;
    Migrated(old_pairaddr?: string | null, cham_pairaddr?: string | null, champ_lp?: BigNumberish | null): MigratedEventFilter;
  };

  estimateGas: {

    setMigrateFactory(
      _champagnefactory: string,
    ): Promise<BigNumber>;
  
    migrate_user(
      orig_pairaddr: string,
    ): Promise<BigNumber>;
  
    migrate(
      orig_pairaddr: string,
      liquidity: BigNumberish,
    ): Promise<BigNumber>;
  
    removeLiquidity(
      orig_pairaddr: string,
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish
    ): Promise<BigNumber>;
  
    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
    ): Promise<BigNumber>;
  };

  populateTransaction: {

    setMigrateFactory(
      _champagnefactory: string,
    ): Promise<PopulatedTransaction>;
  
    migrate_user(
      orig_pairaddr: string,
    ): Promise<PopulatedTransaction>;
  
    migrate(
      orig_pairaddr: string,
      liquidity: BigNumberish,
    ): Promise<PopulatedTransaction>;
  
    removeLiquidity(
      orig_pairaddr: string,
      tokenA: string,
      tokenB: string,
      liquidity: BigNumberish
    ): Promise<PopulatedTransaction>;
  
    addLiquidity(
      tokenA: string,
      tokenB: string,
      amountADesired: BigNumberish,
      amountBDesired: BigNumberish,
    ): Promise<PopulatedTransaction>;
  };
}
